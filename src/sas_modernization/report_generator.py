"""
Report Generator Module

Replaces legacy SAS ODS output with modern Python report generation.
Creates professional clinical trial reports in multiple formats.
"""

import pandas as pd
import numpy as np
from jinja2 import Template
from typing import Dict, List, Optional, Union
import logging
from datetime import datetime
import os

logger = logging.getLogger(__name__)


class ReportGenerator:
    """
    Modernizes SAS ODS functionality with Python-based report generation.
    
    This class provides methods to:
    - Generate HTML reports (replaces ODS HTML)
    - Export to Excel (replaces ODS EXCEL)
    - Create formatted tables (replaces ODS RTF)
    - Generate summary dashboards
    - Apply clinical trial reporting standards
    """
    
    def __init__(self):
        self.reports = {}
        self.templates = self._load_templates()
        
    def _load_templates(self) -> Dict[str, str]:
        """Load HTML report templates."""
        
        # Main report template
        main_template = """
<!DOCTYPE html>
<html>
<head>
    <title>{{ title }}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        .header {
            background-color: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .section {
            background-color: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .table-container {
            overflow-x: auto;
            margin-bottom: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #3498db;
            color: white;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .summary-stats {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }
        .stat-box {
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
            margin: 5px;
            text-align: center;
            min-width: 150px;
        }
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
        }
        .stat-label {
            font-size: 14px;
            color: #7f8c8d;
        }
        .footer {
            margin-top: 30px;
            padding: 15px;
            background-color: #34495e;
            color: white;
            border-radius: 8px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>{{ title }}</h1>
        <p>{{ subtitle }}</p>
        <p><strong>Generated:</strong> {{ timestamp }}</p>
    </div>
    
    {% if summary_stats %}
    <div class="section">
        <h2>Summary Statistics</h2>
        <div class="summary-stats">
            {% for stat in summary_stats %}
            <div class="stat-box">
                <div class="stat-value">{{ stat.value }}</div>
                <div class="stat-label">{{ stat.label }}</div>
            </div>
            {% endfor %}
        </div>
    </div>
    {% endif %}
    
    {% for section in sections %}
    <div class="section">
        <h2>{{ section.title }}</h2>
        {% if section.description %}
        <p>{{ section.description }}</p>
        {% endif %}
        
        {% if section.table %}
        <div class="table-container">
            {{ section.table | safe }}
        </div>
        {% endif %}
        
        {% if section.content %}
        {{ section.content | safe }}
        {% endif %}
    </div>
    {% endfor %}
    
    <div class="footer">
        <p>Report generated by SAS Modernization Prototype | {{ timestamp }}</p>
    </div>
</body>
</html>
        """
        
        return {
            'main': main_template
        }
    
    def create_html_report(self, title: str, data: Dict,
                          output_path: str,
                          subtitle: Optional[str] = None) -> str:
        """
        Create comprehensive HTML report.
        
        Replaces SAS: ODS HTML
        
        Args:
            title: Report title
            data: Dictionary containing report data and sections
            output_path: Path to save HTML file
            subtitle: Optional subtitle
            
        Returns:
            Path to generated HTML file
        """
        try:
            # Prepare template data
            template_data = {
                'title': title,
                'subtitle': subtitle or "Clinical Trial Data Analysis Report",
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'sections': [],
                'summary_stats': []
            }
            
            # Add summary statistics if provided
            if 'summary_stats' in data:
                template_data['summary_stats'] = data['summary_stats']
            
            # Process sections
            if 'sections' in data:
                for section in data['sections']:
                    section_data = {
                        'title': section.get('title', 'Untitled Section'),
                        'description': section.get('description', ''),
                        'content': section.get('content', '')
                    }
                    
                    # Convert DataFrame to HTML table if present
                    if 'dataframe' in section:
                        df = section['dataframe']
                        table_html = df.to_html(classes='table table-striped', 
                                              table_id='data-table',
                                              escape=False,
                                              index=False)
                        section_data['table'] = table_html
                    
                    template_data['sections'].append(section_data)
            
            # Generate HTML from template
            template = Template(self.templates['main'])
            html_content = template.render(**template_data)
            
            # Save to file
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            # Store report info
            self.reports[title] = {
                'type': 'html',
                'path': output_path,
                'created': datetime.now(),
                'data': template_data
            }
            
            logger.info(f"HTML report '{title}' generated: {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"Error creating HTML report: {str(e)}")
            raise
    
    def export_to_excel(self, data: Dict[str, pd.DataFrame],
                       output_path: str,
                       include_charts: bool = False) -> str:
        """
        Export data to Excel workbook with multiple sheets.
        
        Replaces SAS: ODS EXCEL
        
        Args:
            data: Dictionary mapping sheet names to DataFrames
            output_path: Path to save Excel file
            include_charts: Include basic charts (future enhancement)
            
        Returns:
            Path to generated Excel file
        """
        try:
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
                for sheet_name, df in data.items():
                    # Clean sheet name (Excel limitations)
                    clean_sheet_name = sheet_name.replace('/', '_')[:31]
                    
                    # Write DataFrame to sheet
                    df.to_excel(writer, sheet_name=clean_sheet_name, index=False)
                    
                    # Get worksheet for formatting
                    worksheet = writer.sheets[clean_sheet_name]
                    
                    # Auto-adjust column widths
                    for column in worksheet.columns:
                        max_length = 0
                        column_letter = column[0].column_letter
                        
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        
                        adjusted_width = min(max_length + 2, 50)
                        worksheet.column_dimensions[column_letter].width = adjusted_width
                    
                    # Format header row
                    for cell in worksheet[1]:
                        cell.font = cell.font.copy(bold=True)
                        cell.fill = cell.fill.copy(start_color="366092", end_color="366092")
            
            # Store report info
            report_name = os.path.basename(output_path)
            self.reports[report_name] = {
                'type': 'excel',
                'path': output_path,
                'created': datetime.now(),
                'sheets': list(data.keys())
            }
            
            logger.info(f"Excel report generated: {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"Error creating Excel report: {str(e)}")
            raise
    
    def create_summary_dashboard(self, datasets: Dict[str, pd.DataFrame],
                               analysis_results: Dict,
                               output_path: str) -> str:
        """
        Create comprehensive summary dashboard.
        
        Args:
            datasets: Dictionary of datasets
            analysis_results: Results from statistical analysis
            output_path: Path to save dashboard
            
        Returns:
            Path to generated dashboard
        """
        try:
            # Prepare dashboard data
            dashboard_data = {
                'summary_stats': [],
                'sections': []
            }
            
            # Calculate overall summary statistics
            total_records = sum(len(df) for df in datasets.values())
            total_variables = sum(len(df.columns) for df in datasets.values())
            
            dashboard_data['summary_stats'] = [
                {'value': len(datasets), 'label': 'Datasets'},
                {'value': f"{total_records:,}", 'label': 'Total Records'},
                {'value': total_variables, 'label': 'Total Variables'},
                {'value': len(analysis_results), 'label': 'Analyses Performed'}
            ]
            
            # Add dataset information section
            dataset_info = []
            for name, df in datasets.items():
                dataset_info.append({
                    'Dataset': name,
                    'Records': len(df),
                    'Variables': len(df.columns),
                    'Missing Values': df.isnull().sum().sum(),
                    'Memory Usage': f"{df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB"
                })
            
            dataset_df = pd.DataFrame(dataset_info)
            dashboard_data['sections'].append({
                'title': 'Dataset Overview',
                'description': 'Summary information for all loaded datasets',
                'dataframe': dataset_df
            })
            
            # Add analysis results sections
            if 'proc_means' in analysis_results:
                dashboard_data['sections'].append({
                    'title': 'Descriptive Statistics',
                    'description': 'Summary statistics for numeric variables',
                    'dataframe': analysis_results['proc_means']
                })
            
            if 'proc_freq' in analysis_results:
                freq_results = analysis_results['proc_freq']
                for var_name, freq_table in freq_results.items():
                    dashboard_data['sections'].append({
                        'title': f'Frequency Analysis: {var_name}',
                        'description': f'Frequency distribution for variable {var_name}',
                        'dataframe': freq_table
                    })
            
            if 'summary_table' in analysis_results:
                dashboard_data['sections'].append({
                    'title': 'Clinical Summary Table',
                    'description': 'Comprehensive summary table for clinical reporting',
                    'dataframe': analysis_results['summary_table']
                })
            
            # Generate HTML dashboard
            dashboard_path = self.create_html_report(
                title="Clinical Trial Data Analysis Dashboard",
                data=dashboard_data,
                output_path=output_path,
                subtitle="Comprehensive overview of data and analysis results"
            )
            
            logger.info(f"Summary dashboard created: {dashboard_path}")
            return dashboard_path
            
        except Exception as e:
            logger.error(f"Error creating summary dashboard: {str(e)}")
            raise
    
    def format_clinical_table(self, df: pd.DataFrame,
                            title: str,
                            footnotes: Optional[List[str]] = None) -> str:
        """
        Format DataFrame as clinical trial table with proper styling.
        
        Args:
            df: DataFrame to format
            title: Table title
            footnotes: Optional list of footnotes
            
        Returns:
            Formatted HTML table
        """
        try:
            # Create table HTML
            table_html = f"""
            <div class="clinical-table">
                <h3>{title}</h3>
                {df.to_html(classes='clinical-table-data', escape=False, index=False)}
                """
            
            if footnotes:
                table_html += "<div class='footnotes'><h4>Footnotes:</h4><ul>"
                for i, footnote in enumerate(footnotes, 1):
                    table_html += f"<li>{i}. {footnote}</li>"
                table_html += "</ul></div>"
            
            table_html += "</div>"
            
            return table_html
            
        except Exception as e:
            logger.error(f"Error formatting clinical table: {str(e)}")
            raise
    
    def generate_validation_report(self, validation_results: Dict,
                                 output_path: str) -> str:
        """
        Generate data validation report.
        
        Args:
            validation_results: Dictionary of validation results
            output_path: Path to save report
            
        Returns:
            Path to generated report
        """
        try:
            # Prepare validation report data
            report_data = {
                'sections': []
            }
            
            # Add validation summary
            total_checks = sum(len(checks) for checks in validation_results.values())
            passed_checks = sum(
                sum(1 for check in checks if check.get('passed', False))
                for checks in validation_results.values()
            )
            
            summary_stats = [
                {'value': total_checks, 'label': 'Total Checks'},
                {'value': passed_checks, 'label': 'Passed'},
                {'value': total_checks - passed_checks, 'label': 'Failed'},
                {'value': f"{(passed_checks/total_checks*100):.1f}%", 'label': 'Pass Rate'}
            ]
            
            report_data['summary_stats'] = summary_stats
            
            # Add detailed validation results
            for dataset_name, checks in validation_results.items():
                validation_df = pd.DataFrame(checks)
                report_data['sections'].append({
                    'title': f'Validation Results: {dataset_name}',
                    'description': f'Data validation results for dataset {dataset_name}',
                    'dataframe': validation_df
                })
            
            # Generate report
            validation_path = self.create_html_report(
                title="Data Validation Report",
                data=report_data,
                output_path=output_path,
                subtitle="Comprehensive data quality validation results"
            )
            
            logger.info(f"Validation report created: {validation_path}")
            return validation_path
            
        except Exception as e:
            logger.error(f"Error creating validation report: {str(e)}")
            raise
    
    def get_report_list(self) -> List[Dict]:
        """Get list of all generated reports."""
        return [
            {
                'name': name,
                'type': info['type'],
                'path': info['path'],
                'created': info['created'].strftime("%Y-%m-%d %H:%M:%S")
            }
            for name, info in self.reports.items()
        ]
    
    def clear_reports(self):
        """Clear report registry."""
        self.reports.clear()
        logger.info("Report registry cleared")